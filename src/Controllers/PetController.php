<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SwaggerPetstoreLib\Exceptions\ApiException;
use SwaggerPetstoreLib\Models\ApiResponse;
use SwaggerPetstoreLib\Models\Pet;
use SwaggerPetstoreLib\Models\Status2Enum;
use SwaggerPetstoreLib\Utils\FileWrapper;

class PetController extends BaseController
{
    /**
     * uploads an image
     *
     * @param int $petId ID of pet to update
     * @param string|null $additionalMetadata Additional data to pass to server
     * @param FileWrapper|null $file file to upload
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadFile(int $petId, ?string $additionalMetadata = null, ?FileWrapper $file = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/pet/{petId}/uploadImage')
            ->auth('global')
            ->parameters(
                TemplateParam::init('petId', $petId),
                FormParam::init('additionalMetadata', $additionalMetadata),
                FormParam::init('file', $file)
            );

        $_resHandler = $this->responseHandler()->type(ApiResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Add a new pet to the store
     *
     * @param Pet $body Pet object that needs to be added to the store
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function inpet(Pet $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/pet')
            ->auth('global')
            ->parameters(BodyParam::init($body), HeaderParam::init('Content-Type', 'application/json'));

        $_resHandler = $this->responseHandler()->throwErrorOn('405', ErrorType::init('Invalid input'));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update an existing pet
     *
     * @param Pet $body Pet object that needs to be added to the store
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateAnPet(Pet $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/pet')
            ->auth('global')
            ->parameters(BodyParam::init($body), HeaderParam::init('Content-Type', 'application/json'));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Pet not found'))
            ->throwErrorOn('405', ErrorType::init('Validation exception'));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     *
     * @param string[] $status Status values that need to be considered for filter
     *
     * @return Pet[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function findPetInTheStatus(array $status): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/pet/findByStatus')
            ->auth('global')
            ->parameters(QueryParam::init('status', $status)->serializeBy([Status2Enum::class, 'checkValue']));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid status value'))
            ->type(Pet::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @deprecated
     *
     * @param string[] $tags Tags to filter by
     *
     * @return Pet[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function findPetsAnTags(array $tags): array
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated.', E_USER_DEPRECATED);

        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/pet/findByTags')
            ->auth('global')
            ->parameters(QueryParam::init('tags', $tags));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid tag value'))
            ->type(Pet::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a single pet
     *
     * @param int $petId ID of pet to return
     *
     * @return Pet Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPetById(int $petId): Pet
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/pet/{petId}')
            ->auth('global')
            ->parameters(TemplateParam::init('petId', $petId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Pet not found'))
            ->type(Pet::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates a pet in the store with form data
     *
     * @param int $petId ID of pet that needs to be updated
     * @param string|null $name Updated name of the pet
     * @param string|null $status Updated status of the pet
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updatePetWithForm(int $petId, ?string $name = null, ?string $status = null): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/pet/{petId}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('petId', $petId),
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('name', $name),
                FormParam::init('status', $status)
            );

        $_resHandler = $this->responseHandler()->throwErrorOn('405', ErrorType::init('Invalid input'));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deletes a pet
     *
     * @param int $petId Pet id to delete
     * @param string|null $apiKey
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deletePet(int $petId, ?string $apiKey = null): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/pet/{petId}')
            ->auth('global')
            ->parameters(TemplateParam::init('petId', $petId), HeaderParam::init('api_key', $apiKey));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Pet not found'));

        $this->execute($_reqBuilder, $_resHandler);
    }
}
