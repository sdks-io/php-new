<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SwaggerPetstoreLib\Exceptions\ApiException;
use SwaggerPetstoreLib\Models\Order;

class StoreController extends BaseController
{
    /**
     * Place an order for a pet
     *
     * @param Order $body order placed for purchasing the pet
     *
     * @return Order Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function placeOrder(Order $body): Order
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/store/order')
            ->auth('global')
            ->parameters(BodyParam::init($body), HeaderParam::init('Content-Type', 'application/json'));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid Order'))
            ->type(Order::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated
     * exceptions
     *
     * @param int $orderId ID of pet that needs to be fetched
     *
     * @return Order Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getOrderById(int $orderId): Order
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/store/order/{orderId}')
            ->auth('global')
            ->parameters(TemplateParam::init('orderId', $orderId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Order not found'))
            ->type(Order::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will
     * generate API errors
     *
     * @param int $orderId ID of the order that needs to be deleted
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteOrder(int $orderId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/store/order/{orderId}')
            ->auth('global')
            ->parameters(TemplateParam::init('orderId', $orderId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Order not found'));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a map of status codes to quantities
     *
     * @return array<string,int> Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getInventory(): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/store/inventory')->auth('global');

        return $this->execute($_reqBuilder);
    }
}
