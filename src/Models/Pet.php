<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreLib\Models;

use stdClass;

class Pet implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $id;

    /**
     * @var Category|null
     */
    private $category;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string[]
     */
    private $photoUrls;

    /**
     * @var Tag[]|null
     */
    private $tags;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @param string $name
     * @param string[] $photoUrls
     */
    public function __construct(string $name, array $photoUrls)
    {
        $this->name = $name;
        $this->photoUrls = $photoUrls;
    }

    /**
     * Returns Id.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @maps id
     */
    public function setId(?int $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Category.
     */
    public function getCategory(): ?Category
    {
        return $this->category;
    }

    /**
     * Sets Category.
     *
     * @maps category
     */
    public function setCategory(?Category $category): void
    {
        $this->category = $category;
    }

    /**
     * Returns Name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Photo Urls.
     *
     * @return string[]
     */
    public function getPhotoUrls(): array
    {
        return $this->photoUrls;
    }

    /**
     * Sets Photo Urls.
     *
     * @required
     * @maps photoUrls
     *
     * @param string[] $photoUrls
     */
    public function setPhotoUrls(array $photoUrls): void
    {
        $this->photoUrls = $photoUrls;
    }

    /**
     * Returns Tags.
     *
     * @return Tag[]|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     *
     * @maps tags
     *
     * @param Tag[]|null $tags
     */
    public function setTags(?array $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Returns Status.
     * pet status in the store
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * pet status in the store
     *
     * @maps status
     * @factory \SwaggerPetstoreLib\Models\StatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']       = $this->id;
        }
        if (isset($this->category)) {
            $json['category'] = $this->category;
        }
        $json['name']         = $this->name;
        $json['photoUrls']    = $this->photoUrls;
        if (isset($this->tags)) {
            $json['tags']     = $this->tags;
        }
        if (isset($this->status)) {
            $json['status']   = StatusEnum::checkValue($this->status);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
